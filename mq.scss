//  
//  mµ
//  
//  A simple library for handling media queries
//  and breakpoints across SASS/CSS and JavaScript.
//  
//  @author Fabian Michael <hallo@fabianmichael.de>
//  @license MIT
//  

//  Define your breakpoints here. Must be either in px
//  or em units. Breakpoints will be converted to em by
//  the library for best consistency across different
//  browsers.
//  
//  Read [PX, EM or REM Media Queries?](https://zellwk.com/blog/media-query-units/)
//  by Zell Liew for more information on units in media queries.
$mq--breakpoints: (
  (xs 480px)
  (sm 768px)
  (md 1024px)
  (lg 1280px)
  (xl 1440px)
) !default;

//  Prints selectors for pseudo-elements, which are utilized
//  by the JavaScript counterpart of the mµ library. Set to
//  false, if you don’t need the JavaScript functionality or
//  you want to call `@include mq-print-pseudo-rules()`
//  manually.
$mq--print-pseudo-rules :  true           !default;

// Debug settings
$mq--debug              : false           !default;
$mq--debug-z-index      : 10000           !default;
$mq--debug-selector     : 'body::after'   !default;


//  Mixin for generating tge media queries
// 
//  Usage:
// 
//  @include mq(from md) {
//    .nav {
//      position: fixed;
//    }
//  }
// 
//  or:
// 
//  .nav {
//    background: blue;
//    
//    @include mq(from xs to sm) {
//      background: red;
//    }
//  }
// 
// 
//  Supported queries:
// 
//  @include mq(md) { … }
//  @include mq(from md) { … } // same as "mq(md)"
//  @include mq(to md) { … }
//  @include mq(from xs to md) { … }
// 
//  With additional custom media queries:
// 
//  @include mq(xs, '(orientation: landscape)') { … }
//  @include mq(from xs to md, '(orientation: landscape)') { … }
@mixin mq($query: false, $and: false) {

  // Initialize variables
  $min-width: 0;
  $max-width: 0;
  $mediaQuery: '';

  @if $query {
    // $query is not false
    @if type-of($query) == number {
      $min-width: $query;
    } @elseif type-of($query) == list {
      @if length($query) == 4 and nth($query, 1) == from and nth($query, 3) == to {
        // from {breakpoint} to {breakpoint}
        $min-width: mq--px2em(mq--retrieve-breakpoint-width(nth($query, 2)));
        $max-width: mq--px2em(mq--retrieve-breakpoint-width(nth($query, 4)) - 1px);
      } @elseif length($query) == 2 {
        @if nth($query, 1) == from {
          // from {breakpoint}
          $min-width: mq--px2em(mq--retrieve-breakpoint-width(nth($query, 2))); 
        } @elseif nth($query, 1) == to {
          // to {breakpoint}
          $max-width: mq--px2em(mq--retrieve-breakpoint-width(nth($query, 2)) - 1px);
        }
      }
    } @else {
      // {breakpoint} => from {breakpoint}
      $min-width: mq--px2em(mq--retrieve-breakpoint-width($query));
    }
  }

  // Build Media Query

  @if $min-width != 0 {
    //
    $mediaQuery: '(min-width: #{$min-width})';
  }
  
  @if $max-width != 0 {
    @if $mediaQuery != "" {
      $mediaQuery: '#{$mediaQuery} and '; 
    }
    $mediaQuery: '#{$mediaQuery} (max-width: #{$max-width})';
  }

  @if $and {
    $mediaQuery: '#{$mediaQuery} and #{$and}';
  }

  $mediaQuery: unquote(#{$mediaQuery});

  @if $mediaQuery != "" {
    // Only print a media query if it’s not empty
    @media #{$mediaQuery} {
      @content;
    }
  } @else {
    @content;
  }
}


//  Converts a pixel value to it’s em equivalent, based on
//  the browser’s assumed default font-size of 16px. As media
//  queries ignore font-sizes set via CSS, this function does
//  not an additional "base font size" to be set.
//  
//  @return The em equivalent of given pixel value.
@function mq--px2em($px) {
  @if (unitless($px)) {
     @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels for you";
     @return mq--px2em($px + 0px); // That may fail.
  } @else if (unit($px) == em) {
     @return $px;
  }
  @return ($px / 16px) * 1em;
}


// Retrieves the min-width of a breakpoint in px, assuming
// a font-size of 16px.
// 
// @return The min-width of a breakpoint in pixels
@function mq--retrieve-breakpoint-width($name) {
  @each $breakpoint in $mq--breakpoints {
    $breakpoint-name:  nth($breakpoint, 1);
    $breakpoint-width: nth($breakpoint, 2);

    @if $name == $breakpoint-name {
      @if unit($breakpoint-width) == em {
        // Convert to px value, if breakpoints where defined
        // in em
        $breakpoint-width: $breakpoint-width / 16px;
      }
      @return $breakpoint-width;
    }
  }
  @return 'Breakpoint #{$name} does not exist';
}


// Prints the pseudo-rule(s) needed by the JS counterpart
// of mµ.
@mixin mq--print-pseudo-rules {

  $breakpoint-names: "";

  @each $breakpoint in $mq--breakpoints {
    $breakpoint-name  : nth($breakpoint, 1);
    $breakpoint-width : nth($breakpoint, 2);
    $add: ' "#{$breakpoint-name}": "(min-width: #{mq--px2em($breakpoint-width)})" ';
    @if $breakpoint-names != "" {
      $breakpoint-names: "#{$breakpoint-names},#{$add}";
    } @else {
      $breakpoint-names: $add;
    }
  }

  $breakpoint-names : "{" + $breakpoint-names + "}";

  html::before {
    /* Automatically generated by mq to be consumed by its JavaScript counterpart */
    content: $breakpoint-names;
    display: none;
  }
}

@if $mq--print-pseudo-rules {
  // Print pseudo-rules, if enabled
  @include mq--print-pseudo-rules();
}

@if $mq--debug {
  // Print debug rules, if enabled
  #{unquote($mq--debug-selector)} {
    display: block;
    position: fixed;
    font-size: 10px;
    font-family: sans-serif;
    line-height: 1;
    z-index: $mq--debug-z-index;
    background: rgba(0,0,0,0.75);
    color: #fff;
    padding: 3px 6px;
    bottom: 0;
    right: 0;
  }

  @each $breakpoint in $mq--breakpoints {
    $breakpoint-name  : nth($breakpoint, 1);
    $breakpoint-width : nth($breakpoint, 2);

    @include mq($breakpoint-name) {
      #{unquote($mq--debug-selector)} {
        content: "#{$breakpoint-name} (>= #{$breakpoint-width})";
      }
    }
  }
}
